<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.0">
  <POU Name="Top_Level_Control" Id="{5cebfc41-a1ff-45aa-90b1-ac38f52f8ff7}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM TOP_LEVEL_CONTROL (*: INT*)

VAR_INPUT

END_VAR

(*All VAR_IN_OUT variables have been moved to the end of the declaration due to compatibility reasons*)
VAR_IN_OUT
	RGP: System;
	TS_IN: Touchscreen;
END_VAR

VAR

	Last_Screen:INT:=0;
	Screen_Transistion:BOOL:=0;

	//TEST_PROFILE:ARRAY[1..2,1..800] OF REAL:=  [ -39.75,-39.25,-38.75,-38.25,-37.75,-37.25,-36.75,-36.25,-35.75,-35.25,-34.75,-34.25,-33.75,-33.25,-32.75,-32.25,-31.75,-31.25,-30.75,-30.25,-29.75,-29.25,-28.75,-28.25,-27.75,-27.25,-26.75,-26.25,-25.75,-25.25,-24.75,-24.25,-23.75,-23.25,-22.75,-22.25,-21.75,-21.25,-20.75,-20.25,-19.75,-19.25,-18.75,-18.25,-17.75,-17.25,-16.75,-16.25,-15.75,-15.25,-14.75,-14.25,-13.75,-13.25,-12.75,-12.25,-11.75,-11.25,-10.75,-10.25,-9.75,-9.25,-8.75,-8.25,-7.75,-7.25,-6.75,-6.25,-5.75,-5.25,-4.75,-4.25,-3.75,-3.25,-2.75,-2.25,-1.75,-1.25,-0.75,-0.25,0.25,0.75,1.25,1.75,2.25,2.75,3.25,3.75,4.25,4.75,5.25,5.75,6.25,6.75,7.25,7.75,8.25,8.75,9.25,9.75,10.25,10.75,11.25,11.75,12.25,12.75,13.25,13.75,14.25,14.75,15.25,15.75,16.25,16.75,17.25,17.75,18.25,18.75,19.25,19.75,20.25,20.75,21.25,21.75,22.25,22.75,23.25,23.75,24.25,24.75,25.25,25.75,26.25,26.75,27.25,27.75,28.25,28.75,29.25,29.75,30.25,30.75,31.25,31.75,32.25,32.75,33.25,33.75,34.25,34.75,35.25,35.75,36.25,36.75,37.25,37.75,38.25,38.75,39.25,39.75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	//											 0.5,0.476190476,0.452380952,0.428571429,0.404761905,0.380952381,0.357142857,0.333333333,0.30952381,0.285714286,0.261904762,0.238095238,0.214285714,0.19047619,0.166666667,0.142857143,0.119047619,0.095238095,0.071428571,0.047619048,0.023809524,0,-0.416666667,-0.833333333,-1.25,-1.666666667,-2.083333333,-2.5,-2.916666667,-3.333333333,-3.75,-4.166666667,-4.583333333,-5,-5.416666667,-5.833333333,-6.25,-6.666666667,-7.083333333,-7.5,-7.916666667,-8.333333333,-8.75,-9.166666667,-9.583333333,-10,-9.62962963,-9.259259259,-8.888888889,-8.518518519,-8.148148148,-7.777777778,-7.407407407,-7.037037037,-6.666666667,-6.296296296,-5.925925926,-5.555555556,-5.185185185,-4.814814815,-4.444444444,-4.074074074,-3.703703704,-3.333333333,-2.962962963,-2.592592593,-2.222222222,-1.851851852,-1.481481481,-1.111111111,-0.740740741,-0.37037037,0,0.588235294,1.176470588,1.764705882,2.352941176,2.941176471,3.529411765,4.117647059,4.705882353,5.294117647,5.882352941,6.470588235,7.058823529,7.647058824,8.235294118,8.823529412,9.411764706,10,10.58823529,11.17647059,11.76470588,12.35294118,12.94117647,13.52941176,14.11764706,14.70588235,15.29411765,15.88235294,16.47058824,17.05882353,17.64705882,18.23529412,18.82352941,19.41176471,20,19.81818182,19.63636364,19.45454545,19.27272727,19.09090909,18.90909091,18.72727273,18.54545455,18.36363636,18.18181818,18,17.81818182,17.63636364,17.45454545,17.27272727,17.09090909,16.90909091,16.72727273,16.54545455,16.36363636,16.18181818,16,15.81818182,15.63636364,15.45454545,15.27272727,15.09090909,14.90909091,14.72727273,14.54545455,14.36363636,14.18181818,14,13.81818182,13.63636364,13.45454545,13.27272727,13.09090909,12.90909091,12.72727273,12.54545455,12.36363636,12.18181818,12,11.81818182,11.63636364,11.45454545,11.27272727,11.09090909,10.90909091,10.72727273,10.54545455,10.36363636,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
		
	//P00_last_state:INT:=13;
	
// SPEED TOGGLE VARIBLES - ENABLE BITS
	TRANSX_SLOW_SPEED_ENABLE 	: BOOL := 1;
	TRANSX_MEDIUM_SPEED_ENABLE 	: BOOL := 0;
	TRANSX_FAST_SPEED_ENABLE 	: BOOL := 0;
	
	TRANSY_SLOW_SPEED_ENABLE 	: BOOL := 1;
	TRANSY_MEDIUM_SPEED_ENABLE 	: BOOL := 0;
	TRANSY_FAST_SPEED_ENABLE 	: BOOL := 0;
	
	POS_TOOL_ROTZ_SLOW_SPEED_ENABLE 	: BOOL := 1;
	POS_TOOL_ROTZ_MEDIUM_SPEED_ENABLE 	: BOOL := 0;
	POS_TOOL_ROTZ_FAST_SPEED_ENABLE 	: BOOL := 0;
	
	ALL_JACKS_SLOW_SPEED_ENABLE 	: BOOL := 1;
	ALL_JACKS_MEDIUM_SPEED_ENABLE 	: BOOL := 0;
	ALL_JACKS_FAST_SPEED_ENABLE 	: BOOL := 0;

	MON_TOOL_ROTZ_SLOW_SPEED_ENABLE 	: BOOL := 1;
	MON_TOOL_ROTZ_MEDIUM_SPEED_ENABLE 	: BOOL := 0;
	MON_TOOL_ROTZ_FAST_SPEED_ENABLE 	: BOOL := 0;

// SPEED TOGGLE VARIBLES - SPEED VALUES
	TRANSX_SLOW_SPEED 	: INT := 10;
	TRANSX_MEDIUM_SPEED : INT := 50;
	TRANSX_FAST_SPEED 	: INT := 100;
	
	TRANSY_SLOW_SPEED 	: INT := 10;
	TRANSY_MEDIUM_SPEED : INT := 50;
	TRANSY_FAST_SPEED 	: INT := 100;
	
	ALL_JACKS_SLOW_SPEED 	: INT := 10;
	ALL_JACKS_MEDIUM_SPEED 	: INT := 50;
	ALL_JACKS_FAST_SPEED 	: INT := 100;
	
	POS_TOOL_ROTZ_SLOW_SPEED 	: INT := 10;
	POS_TOOL_ROTZ_MEDIUM_SPEED 	: INT := 50;
	POS_TOOL_ROTZ_FAST_SPEED 	: INT := 100;
	
	MON_TOOL_ROTZ_SLOW_SPEED 	: INT := 10;
	MON_TOOL_ROTZ_MEDIUM_SPEED 	: INT := 50;
	MON_TOOL_ROTZ_FAST_SPEED 	: INT := 100;

	
// MOVEMENT AXES (SPEEDS & MOVE ENABLE)
	TRANSX_SPEED 	: INT := 0;
	TRANSX_MOVE 	: BOOL := 0;
	
	TRANSY_SPEED 	: INT := 0;
	TRANSY_MOVE 	: BOOL := 0;
	
	POS_TOOL_ROTZ_SPEED : INT := 0;
	POS_TOOL_ROTZ_MOVE 	: BOOL := 0;
	
	JACK1_MOVE 	: BOOL := 0;
	JACK1_SPEED : REAL := 0;
	
	JACK2_MOVE 	: BOOL := 0;
	JACK2_SPEED	: REAL := 0;
	
	JACK3_MOVE 	: BOOL := 0;
	JACK3_SPEED : REAL := 0;
	
	ALL_JACKS_SPEED : INT := 0;
	
	MON_TOOL_ROTZ_SPEED : INT := 0;	
	MON_TOOL_ROTZ_MOVE 	: BOOL := 0;	
	

// TILT CALCULATION VARIABLES
	COORDINATED_MOTION : BOOL;
	
	JACK1_ANGLE_ABOUT_Z : REAL;
	JACK1_X_POSITION : REAL;
	JACK1_Y_POSITION : REAL;
	JACK1_Z_POSITION : REAL;
	
	JACK2_ANGLE_ABOUT_Z : REAL;
	JACK2_X_POSITION : REAL;
	JACK2_Y_POSITION : REAL;
	JACK2_Z_POSITION : REAL;
	
	JACK3_ANGLE_ABOUT_Z : REAL;
	JACK3_X_POSITION : REAL;
	JACK3_Y_POSITION : REAL;
	JACK3_Z_POSITION : REAL;
	
	ANGLE_ABOUT_X : REAL;			// FIXME: UNUSED AS OF END OF DAY 11.15.19 
	ANGLE_ABOUT_Y : REAL; 			// FIXME: UNUSED AS OF END OF DAY 11.15.19 

//-----------------------------------------------------
	// UNUSED OLD VARs
		//TS_Bump_Time: ARRAY[1..10] OF TIME:=[T#0MS,T#0MS,T#0MS,T#0MS,T#0MS];
		
		//Speed_Factor:REAL:=0.084; (*13% with no deadband*)
			
		//i:INT:=0;
		//j:INT:=0;
		//k:INT:=0;
		//max_t: INT:=1;
		//temp:REAL:=0;
		//temp_1:REAL:=0;
		
	RADIUS : REAL; 	// *UNITS*  --- IN SAME UNITS AS JACK VELOCITY ( *UNITS* /S) 
	PI : REAL := 3.14159;
	
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Initiate local variables
	JACK1_ANGLE_ABOUT_Z := RGP.PROG.JACK1_ANGLE_ABOUT_Z;
	JACK1_X_POSITION := RGP.PROG.JACK1_X_POSITION;
	JACK1_Y_POSITION := RGP.PROG.JACK1_Y_POSITION;
	JACK1_Z_POSITION := RGP.PROG.JACK1_Z_POSITION;
	
	JACK2_ANGLE_ABOUT_Z := RGP.PROG.JACK2_ANGLE_ABOUT_Z;
	JACK2_X_POSITION := RGP.PROG.JACK2_X_POSITION;
	JACK2_Y_POSITION := RGP.PROG.JACK2_Y_POSITION;
	JACK2_Z_POSITION := RGP.PROG.JACK2_Z_POSITION;
	
	JACK3_ANGLE_ABOUT_Z := RGP.PROG.JACK3_ANGLE_ABOUT_Z;
	JACK3_X_POSITION := RGP.PROG.JACK3_X_POSITION;
	JACK3_Y_POSITION := RGP.PROG.JACK3_Y_POSITION;
	JACK3_Z_POSITION := RGP.PROG.JACK3_Z_POSITION;
	
	ANGLE_ABOUT_X := RGP.PROG.ANGLE_ABOUT_X;			// FIXME: UNUSED AS OF END OF DAY 11.15.19 
	ANGLE_ABOUT_Y := RGP.PROG.ANGLE_ABOUT_Y; 		// FIXME: UNUSED AS OF END OF DAY 11.15.19 
	
	RADIUS := RGP.PROG.POS_TOOL_RADIUS; 
	
//Controls the Timers for the Control Overrides
	(*	IF ( RGP.PROG.HMI_ACTIVE_LOC=0 ) THEN
			//RGP.PROG.HPU_OVERRIDE:=0;
			//RGP.PROG.HPU_OVERRIDE_TON.IN:=0;
		ELSIF (RGP.PROG.HPU_OVERRIDE_TON.Q=1) THEN
			RGP.PROG.HPU_OVERRIDE:=0;
			RGP.PROG.HPU_OVERRIDE_TON.IN:=0;
		ELSIF (RGP.PROG.HPU_OVERRIDE=1) THEN
			RGP.PROG.HPU_OVERRIDE_TON.IN:=1;
		ELSE 
			RGP.PROG.HPU_OVERRIDE_TON.IN:=0;
		END_IF
		RGP.PROG.HPU_OVERRIDE_TON();
	
		IF ( RGP.PROG.HMI_ACTIVE_LOC=0 OR RGP.ACTIVE_HMI.TS.P02_User<=1) THEN
			RGP.PROG.FC_OVERRIDE:=0;
			RGP.PROG.FC_OVERRIDE_TON.IN:=0;
		ELSIF (RGP.PROG.FC_OVERRIDE_TON.Q=1) THEN
			RGP.PROG.FC_OVERRIDE:=0;
			RGP.PROG.FC_OVERRIDE_TON.IN:=0;
		ELSIF (RGP.PROG.FC_OVERRIDE=1) THEN
			RGP.PROG.FC_OVERRIDE_TON.IN:=1;
		ELSE 
			RGP.PROG.FC_OVERRIDE_TON.IN:=0;
		END_IF
		RGP.PROG.FC_OVERRIDE_TON();
	*)
	
//Checks if the active HMI has transistioned screens
	IF(  RGP.ACTIVE_HMI.TS.Active_Panel <> Last_Screen )THEN
		Screen_Transistion:=1;
	END_IF

//Checks if a move is in process
		IF( (RGP.EN1000.DV1150_TRANSX_DRIVE.OUT_Enable OR RGP.EN1000.DV1175_TRANSY_DRIVE.OUT_Enable OR RGP.EN1000.DV1151_JACK1_DRIVE.OUT_Enable OR RGP.EN1000.DV1275_JACK2_DRIVE.OUT_Enable OR RGP.EN1000.DV1301_JACK3_DRIVE.OUT_Enable OR RGP.EN1000.DV1325_POS_TOOL_ROTZ_DRIVE.OUT_Enable OR RGP.EN1000.RIO1135_MON_TOOL_ROTZ_DRIVE.OUT_Enable) )THEN
			RGP.PROG.HMI_MOVE_IN_PROGRESS:=1;
		ELSE
			RGP.PROG.HMI_MOVE_IN_PROGRESS:=0;		// When is this used? 
		END_IF

// Top Level System Control per Active Screen
	IF(RGP.ACTIVE_HMI.TS.Active_Panel=01) THEN 		//Home Screen
		RGP.PROG.HMI_OPS_LAST_SCREEN:=01;
		//Disable_System(RGP:=RGP);
		
		// Screen navigation and value updating is handled in Touchscreen_Instance
		
		
	ELSIF (RGP.ACTIVE_HMI.TS.Active_Panel=12) THEN 	//Calibration Operations
		RGP.PROG.HMI_OPS_LAST_SCREEN:=12;
		
		// X-TRANSLATION
			IF (RGP.ACTIVE_HMI.TS.P12B_Calibrate_XTRANS.State) THEN
				RGP.EN1000.DV1150_TRANSX_DRIVE.Feedback.Calibration_Enable := 1;
			ELSIF (RGP.EN1000.DV1150_TRANSX_DRIVE.Feedback.Calibration_Enable = 1) THEN
				RGP.EN1000.DV1150_TRANSX_DRIVE.Feedback.Calibration_Enable := 0;
			END_IF
			
		// Y-TRANSLATION
			IF (RGP.ACTIVE_HMI.TS.P12B_Calibrate_YTRANS.State) THEN
				RGP.EN1000.DV1175_TRANSY_DRIVE.Feedback.Calibration_Enable := 1;
			ELSIF (RGP.EN1000.DV1175_TRANSY_DRIVE.Feedback.Calibration_Enable = 1) THEN
				RGP.EN1000.DV1175_TRANSY_DRIVE.Feedback.Calibration_Enable := 0;
			END_IF
		
		
		// JACK 1
			IF (RGP.ACTIVE_HMI.TS.P12B_Calibrate_Jack1.State) THEN
				RGP.EN1000.DV1151_JACK1_DRIVE.Feedback.Calibration_Enable := 1;
			ELSIF (RGP.EN1000.DV1151_JACK1_DRIVE.Feedback.Calibration_Enable = 1) THEN
				RGP.EN1000.DV1151_JACK1_DRIVE.Feedback.Calibration_Enable := 0;
			END_IF
			
		// JACK 2
			IF (RGP.ACTIVE_HMI.TS.P12B_Calibrate_Jack2.State) THEN
				RGP.EN1000.DV1275_JACK2_DRIVE.Feedback.Calibration_Enable := 1;
			ELSIF (RGP.EN1000.DV1275_JACK2_DRIVE.Feedback.Calibration_Enable = 1) THEN
				RGP.EN1000.DV1275_JACK2_DRIVE.Feedback.Calibration_Enable := 0;
			END_IF
		
		// JACK 3
			IF (RGP.ACTIVE_HMI.TS.P12B_Calibrate_Jack3.State) THEN
				RGP.EN1000.DV1301_JACK3_DRIVE.Feedback.Calibration_Enable := 1;
			ELSIF (RGP.EN1000.DV1301_JACK3_DRIVE.Feedback.Calibration_Enable = 1) THEN
				RGP.EN1000.DV1301_JACK3_DRIVE.Feedback.Calibration_Enable := 0;
			END_IF
		
		// POSITION TOOL Z-ROTATION
			IF (RGP.ACTIVE_HMI.TS.P12B_Calibrate_PosTool_RotZ.State) THEN
				RGP.EN1000.DV1325_POS_TOOL_ROTZ_DRIVE.Feedback.Calibration_Enable := 1;
			ELSIF (RGP.EN1000.DV1325_POS_TOOL_ROTZ_DRIVE.Feedback.Calibration_Enable = 1) THEN
				RGP.EN1000.DV1325_POS_TOOL_ROTZ_DRIVE.Feedback.Calibration_Enable := 0;
			END_IF
			
		// MONITORING TOOL Z-ROTATION
			IF (RGP.ACTIVE_HMI.TS.P12B_Calibrate_MonTool_RotZ.State) THEN
				RGP.EN1000.RIO1135_MON_TOOL_ROTZ_DRIVE.Feedback.Calibration_Enable := 1;
			ELSIF (RGP.EN1000.RIO1135_MON_TOOL_ROTZ_DRIVE.Feedback.Calibration_Enable = 1) THEN
				RGP.EN1000.RIO1135_MON_TOOL_ROTZ_DRIVE.Feedback.Calibration_Enable := 0;
			END_IF
		
	ELSIF (RGP.ACTIVE_HMI.TS.Active_Panel=13) THEN 	//Speed Change Operations
		RGP.PROG.HMI_OPS_LAST_SCREEN:=13;
						
		//SPEED SETTING CONTROL (TOGGLE FROM SLOW TO MEDIUM TO FAST)
			// X TRANSLATION
				IF (RGP.ACTIVE_HMI.TS.P13B_TRANSX_SPEED_Toggle.State) THEN
					IF(TRANSX_SPEED = TRANSX_SLOW_SPEED) THEN
						TRANSX_SPEED := TRANSX_MEDIUM_SPEED;
					ELSIF(TRANSX_SPEED = TRANSX_MEDIUM_SPEED) THEN
						TRANSX_SPEED := TRANSX_FAST_SPEED;
					ELSIF(TRANSX_SPEED = TRANSX_FAST_SPEED) THEN
						TRANSX_SPEED := TRANSX_SLOW_SPEED;
					ELSE
						TRANSX_SPEED := TRANSX_SLOW_SPEED;
					END_IF
					
					RGP.PROG.TRANSX_SPEED := TRANSX_SPEED; 
				END_IF	
			
			// Y TRANSLATION
				IF (RGP.ACTIVE_HMI.TS.P13B_TRANSY_SPEED_Toggle.State) THEN
					IF(TRANSY_SPEED = TRANSY_SLOW_SPEED) THEN
						TRANSY_SPEED := TRANSY_MEDIUM_SPEED;
					ELSIF(TRANSY_SPEED = TRANSY_MEDIUM_SPEED) THEN
						TRANSY_SPEED := TRANSY_FAST_SPEED;
					ELSIF(TRANSY_SPEED = TRANSY_FAST_SPEED) THEN
						TRANSY_SPEED := TRANSY_SLOW_SPEED;
					ELSE
						TRANSY_SPEED := TRANSY_SLOW_SPEED;
					END_IF
					
					RGP.PROG.TRANSY_SPEED := TRANSY_SPEED; 
				END_IF	
			
			// POSITION TOOL Z ROTAITON
				IF (RGP.ACTIVE_HMI.TS.P13B_POS_TOOL_ZROT_SPEED_Toggle.State) THEN
					IF(POS_TOOL_ROTZ_SPEED = POS_TOOL_ROTZ_SLOW_SPEED) THEN
						POS_TOOL_ROTZ_SPEED := POS_TOOL_ROTZ_MEDIUM_SPEED;
					ELSIF(POS_TOOL_ROTZ_SPEED = POS_TOOL_ROTZ_MEDIUM_SPEED) THEN
						POS_TOOL_ROTZ_SPEED := POS_TOOL_ROTZ_FAST_SPEED;
					ELSIF(POS_TOOL_ROTZ_SPEED = POS_TOOL_ROTZ_FAST_SPEED) THEN
						POS_TOOL_ROTZ_SPEED := POS_TOOL_ROTZ_SLOW_SPEED;
					ELSE
						POS_TOOL_ROTZ_SPEED := POS_TOOL_ROTZ_SLOW_SPEED;
					END_IF
					
					RGP.PROG.POS_TOOL_ROTZ_SPEED := POS_TOOL_ROTZ_SPEED; 
				END_IF
	
			// ALL JACKS 
				IF (RGP.ACTIVE_HMI.TS.P13B_All_JACKS_SPEED_Toggle.State) THEN
					IF(JACK1_SPEED = ALL_JACKS_SLOW_SPEED AND JACK2_SPEED = ALL_JACKS_SLOW_SPEED AND JACK3_SPEED = ALL_JACKS_SLOW_SPEED) THEN
						JACK1_SPEED := ALL_JACKS_MEDIUM_SPEED;
						JACK2_SPEED := ALL_JACKS_MEDIUM_SPEED;
						JACK3_SPEED := ALL_JACKS_MEDIUM_SPEED;
						ALL_JACKS_SPEED := ALL_JACKS_MEDIUM_SPEED;
					ELSIF(JACK1_SPEED = ALL_JACKS_MEDIUM_SPEED AND JACK2_SPEED = ALL_JACKS_MEDIUM_SPEED AND JACK3_SPEED = ALL_JACKS_MEDIUM_SPEED) THEN
						JACK1_SPEED := ALL_JACKS_FAST_SPEED;
						JACK2_SPEED := ALL_JACKS_FAST_SPEED;
						JACK3_SPEED := ALL_JACKS_FAST_SPEED;
						ALL_JACKS_SPEED := ALL_JACKS_FAST_SPEED;
					ELSIF(JACK1_SPEED = ALL_JACKS_FAST_SPEED AND JACK2_SPEED = ALL_JACKS_FAST_SPEED AND JACK3_SPEED = ALL_JACKS_FAST_SPEED) THEN
						JACK1_SPEED := ALL_JACKS_SLOW_SPEED;
						JACK2_SPEED := ALL_JACKS_SLOW_SPEED;
						JACK3_SPEED := ALL_JACKS_SLOW_SPEED;
						ALL_JACKS_SPEED := ALL_JACKS_SLOW_SPEED;
					ELSE
						JACK1_SPEED := ALL_JACKS_SLOW_SPEED;
						JACK2_SPEED := ALL_JACKS_SLOW_SPEED;
						JACK3_SPEED := ALL_JACKS_SLOW_SPEED;
						ALL_JACKS_SPEED := ALL_JACKS_SLOW_SPEED;
					END_IF
					
					RGP.PROG.JACK1_SPEED := ALL_JACKS_SPEED;
					RGP.PROG.JACK2_SPEED := ALL_JACKS_SPEED;
					RGP.PROG.JACK3_SPEED := ALL_JACKS_SPEED;
					RGP.PROG.ALL_JACKS_SPEED := ALL_JACKS_SPEED; 
				END_IF
			
			// MONITIORING TOOL Z ROTAITON
				IF (RGP.ACTIVE_HMI.TS.P13B_MON_TOOL_ZROT_SPEED_Toggle.State) THEN
						IF(MON_TOOL_ROTZ_SPEED = MON_TOOL_ROTZ_SLOW_SPEED) THEN
							MON_TOOL_ROTZ_SPEED := MON_TOOL_ROTZ_MEDIUM_SPEED;
						ELSIF(MON_TOOL_ROTZ_SPEED = MON_TOOL_ROTZ_MEDIUM_SPEED) THEN
							MON_TOOL_ROTZ_SPEED := MON_TOOL_ROTZ_FAST_SPEED;
						ELSIF(MON_TOOL_ROTZ_SPEED = MON_TOOL_ROTZ_FAST_SPEED) THEN
							MON_TOOL_ROTZ_SPEED := MON_TOOL_ROTZ_SLOW_SPEED;
						ELSE
							MON_TOOL_ROTZ_SPEED := MON_TOOL_ROTZ_SLOW_SPEED;
						END_IF
						
						RGP.PROG.MON_TOOL_ROTZ_SPEED := MON_TOOL_ROTZ_SPEED;
				END_IF
				
		//CHECKS LAST STATE COMPARISION
			(*
				IF(P53_STATE_LAST <> RGP.PROG.P53_STATE) THEN
					TRANSX_SPEED := 0;
					TRANSX_MOVE := 0;
					TRANSY_SPEED := 0;
					TRANSY_MOVE := 0;
					POS_TOOL_ROTZ_SPEED := 0;
					POS_TOOL_ROTZ_MOVE := 0;
					JACK1_SPEED := 0;
					JACK1_MOVE := 0;
					JACK2_SPEED := 0;
					JACK2_MOVE := 0;
					JACK3_SPEED := 0;
					JACK3_MOVE := 0;
					ALL_JACKS_SPEED := 0;
					MON_TOOL_ROTZ_SPEED := 0;
					MON_TOOL_ROTZ_MOVE := 0;
					
					Disable_System(RGP);
					
				END_IF
			*)
		
	END_IF	
	
//----- Convert Control Inputs to Axis Commands (Enable Move, Direction, & Set speed)
	//X TRANSLATION AXIS - POSITIVE DIRECTION
		IF (RGP.EN1000.SS1157_TRANSX_POS = 1) THEN
			TRANSX_MOVE := 1;
			RGP.PROG.TRANSX_POS_EN := 1;
			// Set speed based on which toggle varible is true (from TS) SEE SECTION "SPEED SETTING CONTROL" 
			IF (TRANSX_SLOW_SPEED_ENABLE = 1 AND (TRANSX_MEDIUM_SPEED_ENABLE = 0 AND TRANSX_FAST_SPEED_ENABLE = 0) ) THEN 
				TRANSX_SPEED := TRANSX_SLOW_SPEED;
			ELSIF (TRANSX_MEDIUM_SPEED_ENABLE = 1 AND (TRANSX_SLOW_SPEED_ENABLE = 0 AND TRANSX_FAST_SPEED_ENABLE = 0) ) THEN
				TRANSX_SPEED := TRANSX_MEDIUM_SPEED;
			ELSIF (TRANSX_FAST_SPEED_ENABLE = 1 AND (TRANSX_SLOW_SPEED_ENABLE = 0 AND TRANSX_MEDIUM_SPEED_ENABLE = 0) ) THEN
				TRANSX_SPEED := TRANSX_FAST_SPEED;
			ELSE // set to slow speed
				TRANSX_SPEED := TRANSX_SLOW_SPEED;
			END_IF
		ELSE
			TRANSX_MOVE := 0;
			RGP.PROG.TRANSX_POS_EN := 0;
			TRANSX_SPEED := 0;
		END_IF
		
	//X TRANSLATION AXIS - NEGATIVE DIRECTION
		IF (RGP.EN1000.SS1157_TRANSX_NEG = 1) THEN
			TRANSX_MOVE := 1;
			RGP.PROG.TRANSX_NEG_EN := 1;
			// Set speed based on which toggle varible is true (from TS) SEE SECTION "SPEED SETTING CONTROL" 
			IF (TRANSX_SLOW_SPEED_ENABLE = 1 AND (TRANSX_MEDIUM_SPEED_ENABLE = 0 AND TRANSX_FAST_SPEED_ENABLE = 0) ) THEN 
				TRANSX_SPEED := -1*TRANSX_SLOW_SPEED;
			ELSIF (TRANSX_MEDIUM_SPEED_ENABLE = 1 AND (TRANSX_SLOW_SPEED_ENABLE = 0 AND TRANSX_FAST_SPEED_ENABLE = 0) ) THEN
				TRANSX_SPEED := -1*TRANSX_MEDIUM_SPEED;
			ELSIF (TRANSX_FAST_SPEED_ENABLE = 1 AND (TRANSX_SLOW_SPEED_ENABLE = 0 AND TRANSX_MEDIUM_SPEED_ENABLE = 0) ) THEN
				TRANSX_SPEED := -1*TRANSX_FAST_SPEED;
			ELSE // set to slow speed
				TRANSX_SPEED := -1*TRANSX_SLOW_SPEED;
			END_IF
		ELSE
			TRANSX_MOVE := 0;
			RGP.PROG.TRANSX_NEG_EN := 0;
			TRANSX_SPEED := 0;
		END_IF
		
	//Y TRANSLATION AXIS - POSITIVE DIRECTION
		IF (RGP.EN1000.SS1182_TRANSY_POS = 1) THEN
			TRANSY_MOVE := 1;
			RGP.PROG.TRANSY_POS_EN := 1;
			// Set speed based on which toggle varible is true (from TS) SEE SECTION "SPEED SETTING CONTROL" 
			IF (TRANSY_SLOW_SPEED_ENABLE = 1 AND (TRANSY_MEDIUM_SPEED_ENABLE = 0 AND TRANSY_FAST_SPEED_ENABLE = 0) ) THEN 
				TRANSY_SPEED := TRANSY_SLOW_SPEED;
			ELSIF (TRANSY_MEDIUM_SPEED_ENABLE = 1 AND (TRANSY_SLOW_SPEED_ENABLE = 0 AND TRANSY_FAST_SPEED_ENABLE = 0) ) THEN
				TRANSY_SPEED := TRANSY_MEDIUM_SPEED;
			ELSIF (TRANSY_FAST_SPEED_ENABLE = 1 AND (TRANSY_SLOW_SPEED_ENABLE = 0 AND TRANSY_MEDIUM_SPEED_ENABLE = 0) ) THEN
				TRANSY_SPEED := TRANSY_FAST_SPEED;
			ELSE // set to slow speed
				TRANSY_SPEED := TRANSY_SLOW_SPEED;
			END_IF
		ELSE
			TRANSY_MOVE := 0;
			RGP.PROG.TRANSY_POS_EN := 0;
			TRANSY_SPEED := 0;
		END_IF
		
	//Y TRANSLATION AXIS - NEGATIVE DIRECTION
		IF (RGP.EN1000.SS1182_TRANSY_NEG = 1) THEN
			TRANSY_MOVE := 1;
			RGP.PROG.TRANSY_NEG_EN := 1;
			// Set speed based on which toggle varible is true (from TS) SEE SECTION "SPEED SETTING CONTROL" 
			IF (TRANSY_SLOW_SPEED_ENABLE = 1 AND (TRANSY_MEDIUM_SPEED_ENABLE = 0 AND TRANSY_FAST_SPEED_ENABLE = 0) ) THEN 
				TRANSY_SPEED := -1*TRANSY_SLOW_SPEED;
			ELSIF (TRANSY_MEDIUM_SPEED_ENABLE = 1 AND (TRANSY_SLOW_SPEED_ENABLE = 0 AND TRANSY_FAST_SPEED_ENABLE = 0) ) THEN
				TRANSY_SPEED := -1*TRANSY_MEDIUM_SPEED;
			ELSIF (TRANSY_FAST_SPEED_ENABLE = 1 AND (TRANSY_SLOW_SPEED_ENABLE = 0 AND TRANSY_MEDIUM_SPEED_ENABLE = 0) ) THEN
				TRANSY_SPEED := -1*TRANSY_FAST_SPEED;
			ELSE // set to slow speed
				TRANSY_SPEED := -1*TRANSY_SLOW_SPEED;
			END_IF
		ELSE
			TRANSY_MOVE := 0;
			RGP.PROG.TRANSY_NEG_EN := 0;
			TRANSY_SPEED := 0;
		END_IF
		
	//Z ROTATION AXIS - POSITIVE DIRECTION
		IF (RGP.EN1000.SS1338_POS_TOOL_ROTZ_POS = 1) THEN
			POS_TOOL_ROTZ_MOVE := 1;
			RGP.PROG.POS_TOOL_ROTZ_POS_EN := 1;
			// Set speed based on which toggle varible is true (from TS) SEE SECTION "SPEED SETTING CONTROL" 
			IF (POS_TOOL_ROTZ_SLOW_SPEED_ENABLE = 1 AND (POS_TOOL_ROTZ_MEDIUM_SPEED_ENABLE = 0 AND POS_TOOL_ROTZ_FAST_SPEED_ENABLE = 0) ) THEN 
				POS_TOOL_ROTZ_SPEED := POS_TOOL_ROTZ_SLOW_SPEED;
			ELSIF (POS_TOOL_ROTZ_MEDIUM_SPEED_ENABLE = 1 AND (POS_TOOL_ROTZ_SLOW_SPEED_ENABLE = 0 AND POS_TOOL_ROTZ_FAST_SPEED_ENABLE = 0) ) THEN
				POS_TOOL_ROTZ_SPEED := POS_TOOL_ROTZ_MEDIUM_SPEED;
			ELSIF (POS_TOOL_ROTZ_FAST_SPEED_ENABLE = 1 AND (POS_TOOL_ROTZ_SLOW_SPEED_ENABLE = 0 AND POS_TOOL_ROTZ_MEDIUM_SPEED_ENABLE = 0) ) THEN
				POS_TOOL_ROTZ_SPEED := POS_TOOL_ROTZ_FAST_SPEED;
			ELSE // set to slow speed
				POS_TOOL_ROTZ_SPEED := POS_TOOL_ROTZ_SLOW_SPEED;
			END_IF
		ELSE
			POS_TOOL_ROTZ_MOVE := 0;
			RGP.PROG.POS_TOOL_ROTZ_POS_EN := 0;
			POS_TOOL_ROTZ_SPEED := 0;
		END_IF
		
	//Z ROTATION AXIS - NEGATIVE DIRECTION
		IF (RGP.EN1000.SS1338_POS_TOOL_ROTZ_NEG = 1) THEN
			POS_TOOL_ROTZ_MOVE := 1;
			RGP.PROG.POS_TOOL_ROTZ_NEG_EN := 1;
			// Set speed based on which toggle varible is true (from TS) SEE SECTION "SPEED SETTING CONTROL" 
			IF (POS_TOOL_ROTZ_SLOW_SPEED_ENABLE = 1 AND (POS_TOOL_ROTZ_MEDIUM_SPEED_ENABLE = 0 AND POS_TOOL_ROTZ_FAST_SPEED_ENABLE = 0) ) THEN 
				POS_TOOL_ROTZ_SPEED := -1*POS_TOOL_ROTZ_SLOW_SPEED;
			ELSIF (POS_TOOL_ROTZ_MEDIUM_SPEED_ENABLE = 1 AND (POS_TOOL_ROTZ_SLOW_SPEED_ENABLE = 0 AND POS_TOOL_ROTZ_FAST_SPEED_ENABLE = 0) ) THEN
				POS_TOOL_ROTZ_SPEED := -1*POS_TOOL_ROTZ_MEDIUM_SPEED;
			ELSIF (POS_TOOL_ROTZ_FAST_SPEED_ENABLE = 1 AND (POS_TOOL_ROTZ_SLOW_SPEED_ENABLE = 0 AND POS_TOOL_ROTZ_MEDIUM_SPEED_ENABLE = 0) ) THEN
				POS_TOOL_ROTZ_SPEED := -1*POS_TOOL_ROTZ_FAST_SPEED;
			ELSE // set to slow speed
				POS_TOOL_ROTZ_SPEED := -1*POS_TOOL_ROTZ_SLOW_SPEED;
			END_IF
		ELSE
			POS_TOOL_ROTZ_MOVE := 0;
			RGP.PROG.POS_TOOL_ROTZ_NEG_EN := 0;
			POS_TOOL_ROTZ_SPEED := 0;
		END_IF

	//ALL JACKS - POSITIVE DIRECTION
		IF (RGP.EN1000.SS1264_ALL_JACKS_TRANSZ_POS = 1) THEN
			JACK1_MOVE := 1;
			JACK2_MOVE := 1;
			JACK3_MOVE := 1;
			RGP.PROG.JACK1_POS_EN := 1;
			RGP.PROG.JACK2_POS_EN := 1;
			RGP.PROG.JACK3_POS_EN := 1;
			// Set speed based on which toggle varible is true (from TS) SEE SECTION "SPEED SETTING CONTROL" 
			IF ( ALL_JACKS_SLOW_SPEED_ENABLE = 1 AND (ALL_JACKS_MEDIUM_SPEED_ENABLE = 0 AND ALL_JACKS_FAST_SPEED_ENABLE = 0) ) THEN 
				ALL_JACKS_SPEED := ALL_JACKS_SLOW_SPEED;
			ELSIF ( ALL_JACKS_MEDIUM_SPEED_ENABLE = 1 AND (ALL_JACKS_SLOW_SPEED_ENABLE = 0 AND ALL_JACKS_FAST_SPEED_ENABLE = 0) ) THEN 
				ALL_JACKS_SPEED := ALL_JACKS_MEDIUM_SPEED;
			ELSIF ( ALL_JACKS_FAST_SPEED_ENABLE = 1 AND (ALL_JACKS_SLOW_SPEED_ENABLE = 0 AND ALL_JACKS_MEDIUM_SPEED_ENABLE = 0) ) THEN 
				ALL_JACKS_SPEED := ALL_JACKS_FAST_SPEED;
			ELSE // set to slow speed
				ALL_JACKS_SPEED := ALL_JACKS_SLOW_SPEED;
			END_IF
		ELSE
			JACK1_MOVE := 0;
			JACK2_MOVE := 0;
			JACK3_MOVE := 0;
			RGP.PROG.JACK1_POS_EN := 0;
			RGP.PROG.JACK2_POS_EN := 0;
			RGP.PROG.JACK3_POS_EN := 0;
			ALL_JACKS_SPEED := 0;
		END_IF
	
	//ALL JACKS - NEGATIVE DIRECTION
		IF (RGP.EN1000.SS1264_ALL_JACKS_TRANSZ_NEG = 1) THEN
			JACK1_MOVE := 1;
			JACK2_MOVE := 1;
			JACK3_MOVE := 1;
			RGP.PROG.JACK1_NEG_EN := 1;
			RGP.PROG.JACK2_NEG_EN := 1;
			RGP.PROG.JACK3_NEG_EN := 1;
			// Set speed based on which toggle varible is true (from TS) SEE SECTION "SPEED SETTING CONTROL" 
			IF ( ALL_JACKS_SLOW_SPEED_ENABLE = 1 AND (ALL_JACKS_MEDIUM_SPEED_ENABLE = 0 AND ALL_JACKS_FAST_SPEED_ENABLE = 0) ) THEN 
				ALL_JACKS_SPEED := -1*ALL_JACKS_SLOW_SPEED;
			ELSIF ( ALL_JACKS_MEDIUM_SPEED_ENABLE = 1 AND (ALL_JACKS_SLOW_SPEED_ENABLE = 0 AND ALL_JACKS_FAST_SPEED_ENABLE = 0) ) THEN 
				ALL_JACKS_SPEED := -1*ALL_JACKS_MEDIUM_SPEED;
			ELSIF ( ALL_JACKS_FAST_SPEED_ENABLE = 1 AND (ALL_JACKS_SLOW_SPEED_ENABLE = 0 AND ALL_JACKS_MEDIUM_SPEED_ENABLE = 0) ) THEN 
				ALL_JACKS_SPEED := -1*ALL_JACKS_FAST_SPEED;
			ELSE // set to slow speed
				ALL_JACKS_SPEED := -1*ALL_JACKS_SLOW_SPEED;
			END_IF
		ELSE
			JACK1_MOVE := 0;
			JACK2_MOVE := 0;
			JACK3_MOVE := 0;
			RGP.PROG.JACK1_NEG_EN := 0;
			RGP.PROG.JACK2_NEG_EN := 0;
			RGP.PROG.JACK3_NEG_EN := 0;
			ALL_JACKS_SPEED := 0;
		END_IF
	
	//JACK 1 - POSITIVE DIRECTION
		IF (RGP.EN1000.SS1307_JACK1_TRANSZ_POS = 1) THEN
			JACK1_MOVE := 1;
			RGP.PROG.JACK1_POS_EN := 1;
			// Set speed based on which toggle varible is true (from TS) SEE SECTION "SPEED SETTING CONTROL" 
			IF ( ALL_JACKS_SLOW_SPEED_ENABLE = 1 AND (ALL_JACKS_MEDIUM_SPEED_ENABLE = 0 AND ALL_JACKS_FAST_SPEED_ENABLE = 0) ) THEN 
				JACK1_SPEED := ALL_JACKS_SLOW_SPEED;
			ELSIF ( ALL_JACKS_MEDIUM_SPEED_ENABLE = 1 AND (ALL_JACKS_SLOW_SPEED_ENABLE = 0 AND ALL_JACKS_FAST_SPEED_ENABLE = 0) ) THEN 
				JACK1_SPEED := ALL_JACKS_MEDIUM_SPEED;
			ELSIF ( ALL_JACKS_FAST_SPEED_ENABLE = 1 AND (ALL_JACKS_SLOW_SPEED_ENABLE = 0 AND ALL_JACKS_MEDIUM_SPEED_ENABLE = 0) ) THEN 
				JACK1_SPEED := ALL_JACKS_FAST_SPEED;
			ELSE // set to slow speed
				JACK1_SPEED := ALL_JACKS_SLOW_SPEED;
			END_IF
		ELSE
			JACK1_MOVE := 0;
			RGP.PROG.JACK1_POS_EN := 0;
			JACK1_SPEED := 0;
		END_IF
		
	//JACK 1 - NEGATIVE DIRECTION
		IF (RGP.EN1000.SS1307_JACK1_TRANSZ_NEG = 1) THEN
			JACK1_MOVE := 1;
			RGP.PROG.JACK1_NEG_EN := 1;
			// Set speed based on which toggle varible is true (from TS) SEE SECTION "SPEED SETTING CONTROL" 
			IF ( ALL_JACKS_SLOW_SPEED_ENABLE = 1 AND (ALL_JACKS_MEDIUM_SPEED_ENABLE = 0 AND ALL_JACKS_FAST_SPEED_ENABLE = 0) ) THEN 
				JACK1_SPEED := -1*ALL_JACKS_SLOW_SPEED;
			ELSIF ( ALL_JACKS_MEDIUM_SPEED_ENABLE = 1 AND (ALL_JACKS_SLOW_SPEED_ENABLE = 0 AND ALL_JACKS_FAST_SPEED_ENABLE = 0) ) THEN 
				JACK1_SPEED := -1*ALL_JACKS_MEDIUM_SPEED;
			ELSIF ( ALL_JACKS_FAST_SPEED_ENABLE = 1 AND (ALL_JACKS_SLOW_SPEED_ENABLE = 0 AND ALL_JACKS_MEDIUM_SPEED_ENABLE = 0) ) THEN 
				JACK1_SPEED := -1*ALL_JACKS_FAST_SPEED;
			ELSE // set to slow speed
				JACK1_SPEED := -1*ALL_JACKS_SLOW_SPEED;
			END_IF
		ELSE
			JACK1_MOVE := 0;
			RGP.PROG.JACK1_NEG_EN := 0;
			JACK1_SPEED := 0;
		END_IF

	//JACK 2 - POSITIVE DIRECTION
		IF (RGP.EN1000.SS1312_JACK2_TRANSZ_POS = 1) THEN
			JACK2_MOVE := 1;
			RGP.PROG.JACK2_POS_EN := 1;
			// Set speed based on which toggle varible is true (from TS) SEE SECTION "SPEED SETTING CONTROL" 
			IF ( ALL_JACKS_SLOW_SPEED_ENABLE = 1 AND (ALL_JACKS_MEDIUM_SPEED_ENABLE = 0 AND ALL_JACKS_FAST_SPEED_ENABLE = 0) ) THEN 
				JACK2_SPEED := ALL_JACKS_SLOW_SPEED;
			ELSIF ( ALL_JACKS_MEDIUM_SPEED_ENABLE = 1 AND (ALL_JACKS_SLOW_SPEED_ENABLE = 0 AND ALL_JACKS_FAST_SPEED_ENABLE = 0) ) THEN 
				JACK2_SPEED := ALL_JACKS_MEDIUM_SPEED;
			ELSIF ( ALL_JACKS_FAST_SPEED_ENABLE = 1 AND (ALL_JACKS_SLOW_SPEED_ENABLE = 0 AND ALL_JACKS_MEDIUM_SPEED_ENABLE = 0) ) THEN 
				JACK2_SPEED := ALL_JACKS_FAST_SPEED;
			ELSE // set to slow speed
				JACK2_SPEED := ALL_JACKS_SLOW_SPEED;
			END_IF
		ELSE
			JACK2_MOVE := 0;
			RGP.PROG.JACK2_POS_EN := 0;
			JACK2_SPEED := 0;
		END_IF
		
	//JACK 2 - NEGATIVE DIRECTION
		IF (RGP.EN1000.SS1312_JACK2_TRANSZ_NEG = 1) THEN
			JACK2_MOVE := 1;
			RGP.PROG.JACK2_NEG_EN := 1;
			// Set speed based on which toggle varible is true (from TS) SEE SECTION "SPEED SETTING CONTROL" 
			IF ( ALL_JACKS_SLOW_SPEED_ENABLE = 1 AND (ALL_JACKS_MEDIUM_SPEED_ENABLE = 0 AND ALL_JACKS_FAST_SPEED_ENABLE = 0) ) THEN 
				JACK2_SPEED := -1*ALL_JACKS_SLOW_SPEED;
			ELSIF ( ALL_JACKS_MEDIUM_SPEED_ENABLE = 1 AND (ALL_JACKS_SLOW_SPEED_ENABLE = 0 AND ALL_JACKS_FAST_SPEED_ENABLE = 0) ) THEN 
				JACK2_SPEED := -1*ALL_JACKS_MEDIUM_SPEED;
			ELSIF ( ALL_JACKS_FAST_SPEED_ENABLE = 1 AND (ALL_JACKS_SLOW_SPEED_ENABLE = 0 AND ALL_JACKS_MEDIUM_SPEED_ENABLE = 0) ) THEN 
				JACK2_SPEED := -1*ALL_JACKS_FAST_SPEED;
			ELSE // set to slow speed
				JACK2_SPEED := -1*ALL_JACKS_SLOW_SPEED;
			END_IF
		ELSE
			JACK2_MOVE := 0;
			RGP.PROG.JACK2_NEG_EN := 0;
			JACK2_SPEED := 0;
		END_IF

	//JACK 3 - POSITIVE DIRECTION
		IF (RGP.EN1000.SS1324_JACK3_TRANSZ_POS = 1) THEN
			JACK3_MOVE := 1;
			RGP.PROG.JACK3_POS_EN := 1;
			// Set speed based on which toggle varible is true (from TS) SEE SECTION "SPEED SETTING CONTROL" 
			IF ( ALL_JACKS_SLOW_SPEED_ENABLE = 1 AND (ALL_JACKS_MEDIUM_SPEED_ENABLE = 0 AND ALL_JACKS_FAST_SPEED_ENABLE = 0) ) THEN 
				JACK3_SPEED := ALL_JACKS_SLOW_SPEED;
			ELSIF ( ALL_JACKS_MEDIUM_SPEED_ENABLE = 1 AND (ALL_JACKS_SLOW_SPEED_ENABLE = 0 AND ALL_JACKS_FAST_SPEED_ENABLE = 0) ) THEN 
				JACK3_SPEED := ALL_JACKS_MEDIUM_SPEED;
			ELSIF ( ALL_JACKS_FAST_SPEED_ENABLE = 1 AND (ALL_JACKS_SLOW_SPEED_ENABLE = 0 AND ALL_JACKS_MEDIUM_SPEED_ENABLE = 0) ) THEN 
				JACK3_SPEED := ALL_JACKS_FAST_SPEED;
			ELSE // set to slow speed
				JACK3_SPEED := ALL_JACKS_SLOW_SPEED;
			END_IF
		ELSE
			JACK3_MOVE := 0;
			RGP.PROG.JACK3_POS_EN := 0;
			JACK3_SPEED := 0;
		END_IF
		
	//JACK 3 - NEGATIVE DIRECTION
		IF (RGP.EN1000.SS1324_JACK3_TRANSZ_NEG = 1) THEN
			JACK3_MOVE := 1;
			RGP.PROG.JACK3_NEG_EN := 1;
			// Set speed based on which toggle varible is true (from TS) SEE SECTION "SPEED SETTING CONTROL" 
			IF ( ALL_JACKS_SLOW_SPEED_ENABLE = 1 AND (ALL_JACKS_MEDIUM_SPEED_ENABLE = 0 AND ALL_JACKS_FAST_SPEED_ENABLE = 0) ) THEN 
				JACK3_SPEED := -1*ALL_JACKS_SLOW_SPEED;
			ELSIF ( ALL_JACKS_MEDIUM_SPEED_ENABLE = 1 AND (ALL_JACKS_SLOW_SPEED_ENABLE = 0 AND ALL_JACKS_FAST_SPEED_ENABLE = 0) ) THEN 
				JACK3_SPEED := -1*ALL_JACKS_MEDIUM_SPEED;
			ELSIF ( ALL_JACKS_FAST_SPEED_ENABLE = 1 AND (ALL_JACKS_SLOW_SPEED_ENABLE = 0 AND ALL_JACKS_MEDIUM_SPEED_ENABLE = 0) ) THEN 
				JACK3_SPEED := -1*ALL_JACKS_FAST_SPEED;
			ELSE // set to slow speed
				JACK3_SPEED := -1*ALL_JACKS_SLOW_SPEED;
			END_IF
		ELSE
			JACK3_MOVE := 0;
			RGP.PROG.JACK3_NEG_EN := 0;
			JACK3_SPEED := 0;
		END_IF
					
	//TILT ABOUT X - POSITIVE DIRECTION (CW)
		IF (RGP.EN1000.SS1273_TILT_ROTX_POS = 1) THEN	
			COORDINATED_MOTION := 1;			
			IF(RGP.PROG.USE_BASE_PLATE_XY = 1) THEN	
				// Enable movement
					JACK1_MOVE := 1;							
					JACK2_MOVE := 1;
					JACK3_MOVE := 1;
					
				// Set POS/NEG ENABLE variables based on sign of position of jack perpendicular to tilt axis 
					IF (JACK1_Y_POSITION < 0) THEN
						RGP.PROG.JACK1_POS_EN := 1;
					ELSIF(JACK1_Y_POSITION > 0) THEN
						RGP.PROG.JACK1_NEG_EN := 1;
					ELSE // If on the axis		This would RARlY (if ever) happen due to discritization and rounding
						RGP.PROG.JACK1_POS_EN := 0;
						RGP.PROG.JACK1_NEG_EN := 0;			
					END_IF
					
					IF (JACK2_Y_POSITION < 0) THEN
						RGP.PROG.JACK2_POS_EN := 1;
					ELSIF(JACK2_Y_POSITION > 0) THEN
						RGP.PROG.JACK2_NEG_EN := 1;
					ELSE // If on the axis		
						RGP.PROG.JACK2_POS_EN := 0;
						RGP.PROG.JACK2_NEG_EN := 0;			
					END_IF
					
					IF (JACK3_Y_POSITION < 0) THEN
						RGP.PROG.JACK3_POS_EN := 1;
					ELSIF(JACK3_Y_POSITION > 0) THEN
						RGP.PROG.JACK3_NEG_EN := 1;
					ELSE // If on the axis		
						RGP.PROG.JACK3_POS_EN := 0;
						RGP.PROG.JACK3_NEG_EN := 0;			
					END_IF
				
				// Set Jack Speeds: Max velocity (based on speed selection) scaled by the perpendicular distance away from the tilt axis
					IF ( ALL_JACKS_SLOW_SPEED_ENABLE = 1 AND (ALL_JACKS_MEDIUM_SPEED_ENABLE = 0 AND ALL_JACKS_FAST_SPEED_ENABLE = 0) ) THEN 
						JACK1_SPEED := -1*JACK1_Y_POSITION*ALL_JACKS_SLOW_SPEED;
						JACK2_SPEED := -1*JACK2_Y_POSITION*ALL_JACKS_SLOW_SPEED;
						JACK3_SPEED := -1*JACK3_Y_POSITION*ALL_JACKS_SLOW_SPEED;
					ELSIF ( ALL_JACKS_MEDIUM_SPEED_ENABLE = 1 AND (ALL_JACKS_SLOW_SPEED_ENABLE = 0 AND ALL_JACKS_FAST_SPEED_ENABLE = 0) ) THEN 
						JACK1_SPEED := -1*JACK1_Y_POSITION*ALL_JACKS_MEDIUM_SPEED;
						JACK2_SPEED := -1*JACK2_Y_POSITION*ALL_JACKS_MEDIUM_SPEED;
						JACK3_SPEED := -1*JACK3_Y_POSITION*ALL_JACKS_MEDIUM_SPEED;
					ELSIF ( ALL_JACKS_FAST_SPEED_ENABLE = 1 AND (ALL_JACKS_SLOW_SPEED_ENABLE = 0 AND ALL_JACKS_MEDIUM_SPEED_ENABLE = 0) ) THEN 
						JACK1_SPEED := -1*JACK1_Y_POSITION*ALL_JACKS_FAST_SPEED;
						JACK2_SPEED := -1*JACK2_Y_POSITION*ALL_JACKS_FAST_SPEED;
						JACK3_SPEED := -1*JACK3_Y_POSITION*ALL_JACKS_FAST_SPEED;
					ELSE // set to slow speed
						JACK1_SPEED := -1*JACK1_Y_POSITION*ALL_JACKS_SLOW_SPEED;
						JACK2_SPEED := -1*JACK2_Y_POSITION*ALL_JACKS_SLOW_SPEED;
						JACK3_SPEED := -1*JACK3_Y_POSITION*ALL_JACKS_SLOW_SPEED;
					END_IF
					
			ELSE		// USING DRAWN LINE ON PIPE (JACK1 INLINE) AS X AXIS
				// Enable movement
					JACK2_MOVE := 1;
					JACK3_MOVE := 1;
					
				// Set POS/NEG ENABLE variables 
					RGP.PROG.JACK2_NEG_EN := 1;
					RGP.PROG.JACK3_POS_EN := 1;
									
				// Set Jack Speeds
					IF ( ALL_JACKS_SLOW_SPEED_ENABLE = 1 AND (ALL_JACKS_MEDIUM_SPEED_ENABLE = 0 AND ALL_JACKS_FAST_SPEED_ENABLE = 0) ) THEN 
						JACK2_SPEED := -1*ALL_JACKS_SLOW_SPEED;
						JACK3_SPEED := ALL_JACKS_SLOW_SPEED;
					ELSIF ( ALL_JACKS_MEDIUM_SPEED_ENABLE = 1 AND (ALL_JACKS_SLOW_SPEED_ENABLE = 0 AND ALL_JACKS_FAST_SPEED_ENABLE = 0) ) THEN 
						JACK2_SPEED := -1*ALL_JACKS_MEDIUM_SPEED;
						JACK3_SPEED := ALL_JACKS_MEDIUM_SPEED;
					ELSIF ( ALL_JACKS_FAST_SPEED_ENABLE = 1 AND (ALL_JACKS_SLOW_SPEED_ENABLE = 0 AND ALL_JACKS_MEDIUM_SPEED_ENABLE = 0) ) THEN 
						JACK2_SPEED := -1*ALL_JACKS_FAST_SPEED;
						JACK3_SPEED := ALL_JACKS_FAST_SPEED;
					ELSE // set to slow speed
						JACK2_SPEED := -1*ALL_JACKS_SLOW_SPEED;
						JACK3_SPEED := ALL_JACKS_SLOW_SPEED;
					END_IF
			END_IF
			
		ELSE
			// Disable Movement
				JACK1_MOVE := 0;
				JACK2_MOVE := 0;
				JACK3_MOVE := 0;
				
			// Disable POS/NEG ENABLE variables 
				RGP.PROG.JACK1_POS_EN := 0;
				RGP.PROG.JACK1_NEG_EN := 0;
				RGP.PROG.JACK2_POS_EN := 0;
				RGP.PROG.JACK2_NEG_EN := 0;
				RGP.PROG.JACK3_POS_EN := 0;
				RGP.PROG.JACK3_NEG_EN := 0;	
			
			// Set speed to 0 
				JACK1_SPEED := 0;
				JACK2_SPEED := 0;
				JACK3_SPEED := 0;
								
		END_IF
		
	//TILT ABOUT X - NEGATIVE DIRECTION (CCW)
		IF (RGP.EN1000.SS1273_TILT_ROTX_NEG = 1) THEN
			COORDINATED_MOTION := 1;
			IF(RGP.PROG.USE_BASE_PLATE_XY = 1) THEN
				// Enable movement
					JACK1_MOVE := 1;
					JACK2_MOVE := 1;
					JACK3_MOVE := 1;
					
				// Set POS/NEG ENABLE variables based on sign of position of jack perpendicular to tilt axis 
					IF (JACK1_Y_POSITION < 0) THEN
						RGP.PROG.JACK1_NEG_EN := 1;
					ELSIF(JACK1_Y_POSITION > 0) THEN
						RGP.PROG.JACK1_POS_EN := 1;
					ELSE // If on the axis		This would RARlY (if ever) happen due to discritization and rounding
						RGP.PROG.JACK1_POS_EN := 0;
						RGP.PROG.JACK1_NEG_EN := 0;			
					END_IF
					
					IF (JACK2_Y_POSITION < 0) THEN
						RGP.PROG.JACK2_NEG_EN := 1;
					ELSIF(JACK2_Y_POSITION > 0) THEN
						RGP.PROG.JACK2_POS_EN := 1;
					ELSE // If on the axis		
						RGP.PROG.JACK2_POS_EN := 0;
						RGP.PROG.JACK2_NEG_EN := 0;			
					END_IF
					
					IF (JACK3_Y_POSITION < 0) THEN
						RGP.PROG.JACK3_NEG_EN := 1;
					ELSIF(JACK3_Y_POSITION > 0) THEN
						RGP.PROG.JACK3_POS_EN := 1;
					ELSE // If on the axis		
						RGP.PROG.JACK3_POS_EN := 0;
						RGP.PROG.JACK3_NEG_EN := 0;
					END_IF
					
				// Set Jack Speeds: Max velocity (based on speed selection) scaled by the perpendicular distance away from the tilt axis
					IF ( ALL_JACKS_SLOW_SPEED_ENABLE = 1 AND (ALL_JACKS_MEDIUM_SPEED_ENABLE = 0 AND ALL_JACKS_FAST_SPEED_ENABLE = 0) ) THEN 
						JACK1_SPEED := JACK1_Y_POSITION*ALL_JACKS_SLOW_SPEED;
						JACK2_SPEED := JACK2_Y_POSITION*ALL_JACKS_SLOW_SPEED;
						JACK3_SPEED := JACK3_Y_POSITION*ALL_JACKS_SLOW_SPEED;
					ELSIF ( ALL_JACKS_MEDIUM_SPEED_ENABLE = 1 AND (ALL_JACKS_SLOW_SPEED_ENABLE = 0 AND ALL_JACKS_FAST_SPEED_ENABLE = 0) ) THEN 
						JACK1_SPEED := JACK1_Y_POSITION*ALL_JACKS_MEDIUM_SPEED;
						JACK2_SPEED := JACK2_Y_POSITION*ALL_JACKS_MEDIUM_SPEED;
						JACK3_SPEED := JACK3_Y_POSITION*ALL_JACKS_MEDIUM_SPEED;
					ELSIF ( ALL_JACKS_FAST_SPEED_ENABLE = 1 AND (ALL_JACKS_SLOW_SPEED_ENABLE = 0 AND ALL_JACKS_MEDIUM_SPEED_ENABLE = 0) ) THEN 
						JACK1_SPEED := JACK1_Y_POSITION*ALL_JACKS_FAST_SPEED;
						JACK2_SPEED := JACK2_Y_POSITION*ALL_JACKS_FAST_SPEED;
						JACK3_SPEED := JACK3_Y_POSITION*ALL_JACKS_FAST_SPEED;
					ELSE // set to slow speed
						JACK1_SPEED := JACK1_Y_POSITION*ALL_JACKS_SLOW_SPEED;
						JACK2_SPEED := JACK2_Y_POSITION*ALL_JACKS_SLOW_SPEED;
						JACK3_SPEED := JACK3_Y_POSITION*ALL_JACKS_SLOW_SPEED;
					END_IF
					
			ELSE // USE PIPE AXES
				// Enable movement
					JACK2_MOVE := 1;
					JACK3_MOVE := 1;
					
				// Set POS/NEG ENABLE
					RGP.PROG.JACK2_POS_EN := 1;
					RGP.PROG.JACK3_NEG_EN := 1;
					
				// Set Jack Speeds
					IF ( ALL_JACKS_SLOW_SPEED_ENABLE = 1 AND (ALL_JACKS_MEDIUM_SPEED_ENABLE = 0 AND ALL_JACKS_FAST_SPEED_ENABLE = 0) ) THEN 
						JACK2_SPEED := ALL_JACKS_SLOW_SPEED;
						JACK3_SPEED := -1*ALL_JACKS_SLOW_SPEED;
					ELSIF ( ALL_JACKS_MEDIUM_SPEED_ENABLE = 1 AND (ALL_JACKS_SLOW_SPEED_ENABLE = 0 AND ALL_JACKS_FAST_SPEED_ENABLE = 0) ) THEN 
						JACK2_SPEED := ALL_JACKS_MEDIUM_SPEED;
						JACK3_SPEED := -1*ALL_JACKS_MEDIUM_SPEED;
					ELSIF ( ALL_JACKS_FAST_SPEED_ENABLE = 1 AND (ALL_JACKS_SLOW_SPEED_ENABLE = 0 AND ALL_JACKS_MEDIUM_SPEED_ENABLE = 0) ) THEN 
						JACK2_SPEED := ALL_JACKS_FAST_SPEED;
						JACK3_SPEED := -1*ALL_JACKS_FAST_SPEED;
					ELSE // set to slow speed
						JACK2_SPEED := ALL_JACKS_SLOW_SPEED;
						JACK3_SPEED := -1*ALL_JACKS_SLOW_SPEED;
					END_IF
			END_IF
							
		ELSE
			// Disable Movement
				JACK1_MOVE := 0;
				JACK2_MOVE := 0;
				JACK3_MOVE := 0;
				
			// Disable POS/NEG ENABLE variables 
				RGP.PROG.JACK1_POS_EN := 0;
				RGP.PROG.JACK1_NEG_EN := 0;
				RGP.PROG.JACK2_POS_EN := 0;
				RGP.PROG.JACK2_NEG_EN := 0;
				RGP.PROG.JACK3_POS_EN := 0;
				RGP.PROG.JACK3_NEG_EN := 0;	
			
			// Set speed to 0 
				JACK1_SPEED := 0;
				JACK2_SPEED := 0;
				JACK3_SPEED := 0;
			
		END_IF
		
	//TILT ABOUT Y - POSITIVE DIRECTION (CW)
		IF (RGP.EN1000.SS1282_TILT_ROTY_POS = 1) THEN
			COORDINATED_MOTION := 1;
			IF(RGP.PROG.USE_BASE_PLATE_XY = 1) THEN
				// Enable movement
					JACK1_MOVE := 1;
					JACK2_MOVE := 1;
					JACK3_MOVE := 1;
				
				// Set POS/NEG ENABLE variables based on sign of position of jack perpendicular to tilt axis 
					IF (JACK1_X_POSITION < 0) THEN
						RGP.PROG.JACK1_POS_EN := 1;
					ELSIF(JACK1_X_POSITION > 0) THEN
						RGP.PROG.JACK1_NEG_EN := 1;
					ELSE // If on the axis		This would RARlY (if ever) happen due to discritization and rounding
						RGP.PROG.JACK1_POS_EN := 0;
						RGP.PROG.JACK1_NEG_EN := 0;			
					END_IF
					
					IF (JACK2_X_POSITION < 0) THEN
						RGP.PROG.JACK2_POS_EN := 1;
					ELSIF(JACK2_X_POSITION > 0) THEN
						RGP.PROG.JACK2_NEG_EN := 1;
					ELSE // If on the axis		
						RGP.PROG.JACK2_POS_EN := 0;
						RGP.PROG.JACK2_NEG_EN := 0;			
					END_IF
					
					IF (JACK3_X_POSITION < 0) THEN
						RGP.PROG.JACK3_POS_EN := 1;
					ELSIF(JACK3_X_POSITION > 0) THEN
						RGP.PROG.JACK3_NEG_EN := 1;
					ELSE // If on the axis		
						RGP.PROG.JACK3_POS_EN := 0;
						RGP.PROG.JACK3_NEG_EN := 0;			
					END_IF
				
				// Set Jack Speeds: Max velocity (based on speed selection) scaled by the perpendicular distance away from the tilt axis
					IF ( ALL_JACKS_SLOW_SPEED_ENABLE = 1 AND (ALL_JACKS_MEDIUM_SPEED_ENABLE = 0 AND ALL_JACKS_FAST_SPEED_ENABLE = 0) ) THEN 
						JACK1_SPEED := -1*JACK1_X_POSITION*ALL_JACKS_SLOW_SPEED;
						JACK2_SPEED := -1*JACK2_X_POSITION*ALL_JACKS_SLOW_SPEED;
						JACK3_SPEED := -1*JACK3_X_POSITION*ALL_JACKS_SLOW_SPEED;
					ELSIF ( ALL_JACKS_MEDIUM_SPEED_ENABLE = 1 AND (ALL_JACKS_SLOW_SPEED_ENABLE = 0 AND ALL_JACKS_FAST_SPEED_ENABLE = 0) ) THEN 
						JACK1_SPEED := -1*JACK1_X_POSITION*ALL_JACKS_MEDIUM_SPEED;
						JACK2_SPEED := -1*JACK2_X_POSITION*ALL_JACKS_MEDIUM_SPEED;
						JACK3_SPEED := -1*JACK3_X_POSITION*ALL_JACKS_MEDIUM_SPEED;
					ELSIF ( ALL_JACKS_FAST_SPEED_ENABLE = 1 AND (ALL_JACKS_SLOW_SPEED_ENABLE = 0 AND ALL_JACKS_MEDIUM_SPEED_ENABLE = 0) ) THEN 
						JACK1_SPEED := -1*JACK1_X_POSITION*ALL_JACKS_FAST_SPEED;
						JACK2_SPEED := -1*JACK2_X_POSITION*ALL_JACKS_FAST_SPEED;
						JACK3_SPEED := -1*JACK3_X_POSITION*ALL_JACKS_FAST_SPEED;
					ELSE // set to slow speed
						JACK1_SPEED := -1*JACK1_X_POSITION*ALL_JACKS_SLOW_SPEED;
						JACK2_SPEED := -1*JACK2_X_POSITION*ALL_JACKS_SLOW_SPEED;
						JACK3_SPEED := -1*JACK3_X_POSITION*ALL_JACKS_SLOW_SPEED;
					END_IF
			ELSE // USE PIPE AXES
				// Enable movement
					JACK1_MOVE := 1;
					JACK2_MOVE := 1;
					JACK3_MOVE := 1;
					
				// Set POS/NEG ENABLE
					RGP.PROG.JACK1_NEG_EN := 1;
					RGP.PROG.JACK2_POS_EN := 1;
					RGP.PROG.JACK3_POS_EN := 1;
					
				// Set Jack Speeds
					IF ( ALL_JACKS_SLOW_SPEED_ENABLE = 1 AND (ALL_JACKS_MEDIUM_SPEED_ENABLE = 0 AND ALL_JACKS_FAST_SPEED_ENABLE = 0) ) THEN 
						JACK1_SPEED := -1*ALL_JACKS_SLOW_SPEED;
						JACK2_SPEED := (1/2)*ALL_JACKS_SLOW_SPEED;
						JACK3_SPEED := (1/2)*ALL_JACKS_SLOW_SPEED;
					ELSIF ( ALL_JACKS_MEDIUM_SPEED_ENABLE = 1 AND (ALL_JACKS_SLOW_SPEED_ENABLE = 0 AND ALL_JACKS_FAST_SPEED_ENABLE = 0) ) THEN 
						JACK1_SPEED := -1*ALL_JACKS_MEDIUM_SPEED;							
						JACK2_SPEED := (1/2)*ALL_JACKS_MEDIUM_SPEED;
						JACK3_SPEED := (1/2)*ALL_JACKS_MEDIUM_SPEED;
					ELSIF ( ALL_JACKS_FAST_SPEED_ENABLE = 1 AND (ALL_JACKS_SLOW_SPEED_ENABLE = 0 AND ALL_JACKS_MEDIUM_SPEED_ENABLE = 0) ) THEN
						JACK1_SPEED := -1*ALL_JACKS_MEDIUM_SPEED; 
						JACK2_SPEED := (1/2)*ALL_JACKS_FAST_SPEED;
						JACK3_SPEED := (1/2)*ALL_JACKS_FAST_SPEED;
					ELSE // set to slow speed
						JACK1_SPEED := -1*ALL_JACKS_SLOW_SPEED;
						JACK2_SPEED := (1/2)*ALL_JACKS_SLOW_SPEED;
						JACK3_SPEED := (1/2)*ALL_JACKS_SLOW_SPEED;
					END_IF
			END_IF
			
		ELSE
			// Disable Movement
				JACK1_MOVE := 0;
				JACK2_MOVE := 0;
				JACK3_MOVE := 0;
				
			// Disable POS/NEG ENABLE variables 
				RGP.PROG.JACK1_POS_EN := 0;
				RGP.PROG.JACK1_NEG_EN := 0;
				RGP.PROG.JACK2_POS_EN := 0;
				RGP.PROG.JACK2_NEG_EN := 0;
				RGP.PROG.JACK3_POS_EN := 0;
				RGP.PROG.JACK3_NEG_EN := 0;		
				
			// Set speed to 0 
				JACK1_SPEED := 0;
				JACK2_SPEED := 0;
				JACK3_SPEED := 0;
								
		END_IF
		
	//TILT ABOUT Y - NEGATIVE DIRECTION (CCW)
		IF (RGP.EN1000.SS1282_TILT_ROTY_NEG = 1) THEN
			COORDINATED_MOTION := 1;
			IF(RGP.PROG.USE_BASE_PLATE_XY = 1) THEN
				// Enable movement
					JACK1_MOVE := 1;
					JACK2_MOVE := 1;
					JACK3_MOVE := 1;
				
				// Set POS/NEG ENABLE variables based on sign of position of jack perpendicular to tilt axis 
					IF (JACK1_X_POSITION < 0) THEN
						RGP.PROG.JACK1_NEG_EN := 1;
					ELSIF(JACK1_X_POSITION > 0) THEN
						RGP.PROG.JACK1_POS_EN := 1;
					ELSE // If on the axis		This would RARlY (if ever) happen due to discritization and rounding
						RGP.PROG.JACK1_POS_EN := 0;
						RGP.PROG.JACK1_NEG_EN := 0;			
					END_IF
					
					IF (JACK2_X_POSITION < 0) THEN
						RGP.PROG.JACK2_NEG_EN := 1;
					ELSIF(JACK2_X_POSITION > 0) THEN
						RGP.PROG.JACK2_POS_EN := 1;
					ELSE // If on the axis		
						RGP.PROG.JACK2_POS_EN := 0;
						RGP.PROG.JACK2_NEG_EN := 0;			
					END_IF
					
					IF (JACK3_X_POSITION < 0) THEN
						RGP.PROG.JACK3_NEG_EN := 1;
					ELSIF(JACK3_X_POSITION > 0) THEN
						RGP.PROG.JACK3_POS_EN := 1;
					ELSE // If on the axis		
						RGP.PROG.JACK3_POS_EN := 0;
						RGP.PROG.JACK3_NEG_EN := 0;			
					END_IF
				
				// Set Jack Speeds: Max velocity (based on speed selection) scaled by the perpendicular distance away from the tilt axis
					IF ( ALL_JACKS_SLOW_SPEED_ENABLE = 1 AND (ALL_JACKS_MEDIUM_SPEED_ENABLE = 0 AND ALL_JACKS_FAST_SPEED_ENABLE = 0) ) THEN 
						JACK1_SPEED := JACK1_X_POSITION*ALL_JACKS_SLOW_SPEED;
						JACK2_SPEED := JACK2_X_POSITION*ALL_JACKS_SLOW_SPEED;
						JACK3_SPEED := JACK3_X_POSITION*ALL_JACKS_SLOW_SPEED;
					ELSIF ( ALL_JACKS_MEDIUM_SPEED_ENABLE = 1 AND (ALL_JACKS_SLOW_SPEED_ENABLE = 0 AND ALL_JACKS_FAST_SPEED_ENABLE = 0) ) THEN 
						JACK1_SPEED := JACK1_X_POSITION*ALL_JACKS_MEDIUM_SPEED;
						JACK2_SPEED := JACK2_X_POSITION*ALL_JACKS_MEDIUM_SPEED;
						JACK3_SPEED := JACK3_X_POSITION*ALL_JACKS_MEDIUM_SPEED;
					ELSIF ( ALL_JACKS_FAST_SPEED_ENABLE = 1 AND (ALL_JACKS_SLOW_SPEED_ENABLE = 0 AND ALL_JACKS_MEDIUM_SPEED_ENABLE = 0) ) THEN 
						JACK1_SPEED := JACK1_X_POSITION*ALL_JACKS_FAST_SPEED;
						JACK2_SPEED := JACK2_X_POSITION*ALL_JACKS_FAST_SPEED;
						JACK3_SPEED := JACK3_X_POSITION*ALL_JACKS_FAST_SPEED;
					ELSE // set to slow speed
						JACK1_SPEED := JACK1_X_POSITION*ALL_JACKS_SLOW_SPEED;
						JACK2_SPEED := JACK2_X_POSITION*ALL_JACKS_SLOW_SPEED;
						JACK3_SPEED := JACK3_X_POSITION*ALL_JACKS_SLOW_SPEED;
					END_IF
					
			ELSE // USE PIPE AXES
				// Enable movement
					JACK1_MOVE := 1;
					JACK2_MOVE := 1;
					JACK3_MOVE := 1;
					
				// Set POS/NEG ENABLE
					RGP.PROG.JACK1_POS_EN := 1;
					RGP.PROG.JACK2_NEG_EN := 1;
					RGP.PROG.JACK3_NEG_EN := 1;
					
				// Set Jack Speeds
					IF ( ALL_JACKS_SLOW_SPEED_ENABLE = 1 AND (ALL_JACKS_MEDIUM_SPEED_ENABLE = 0 AND ALL_JACKS_FAST_SPEED_ENABLE = 0) ) THEN 
						JACK1_SPEED := ALL_JACKS_SLOW_SPEED;
						JACK2_SPEED := (-1/2)*ALL_JACKS_SLOW_SPEED;
						JACK3_SPEED := (-1/2)*ALL_JACKS_SLOW_SPEED;
					ELSIF ( ALL_JACKS_MEDIUM_SPEED_ENABLE = 1 AND (ALL_JACKS_SLOW_SPEED_ENABLE = 0 AND ALL_JACKS_FAST_SPEED_ENABLE = 0) ) THEN 
						JACK1_SPEED := ALL_JACKS_MEDIUM_SPEED;							
						JACK2_SPEED := (-1/2)*ALL_JACKS_MEDIUM_SPEED;
						JACK3_SPEED := (-1/2)*ALL_JACKS_MEDIUM_SPEED;
					ELSIF ( ALL_JACKS_FAST_SPEED_ENABLE = 1 AND (ALL_JACKS_SLOW_SPEED_ENABLE = 0 AND ALL_JACKS_MEDIUM_SPEED_ENABLE = 0) ) THEN
						JACK1_SPEED := ALL_JACKS_MEDIUM_SPEED; 
						JACK2_SPEED := (-1/2)*ALL_JACKS_FAST_SPEED;
						JACK3_SPEED := (-1/2)*ALL_JACKS_FAST_SPEED;
					ELSE // set to slow speed
						JACK1_SPEED := ALL_JACKS_SLOW_SPEED;
						JACK2_SPEED := (-1/2)*ALL_JACKS_SLOW_SPEED;
						JACK3_SPEED := (-1/2)*ALL_JACKS_SLOW_SPEED;
					END_IF
			END_IF
				
		ELSE
			// Disable Movement
				JACK1_MOVE := 0;
				JACK2_MOVE := 0;
				JACK3_MOVE := 0;
				
			// Disable POS/NEG ENABLE variables 
				RGP.PROG.JACK1_POS_EN := 0;
				RGP.PROG.JACK1_NEG_EN := 0;
				RGP.PROG.JACK2_POS_EN := 0;
				RGP.PROG.JACK2_NEG_EN := 0;
				RGP.PROG.JACK3_POS_EN := 0;
				RGP.PROG.JACK3_NEG_EN := 0;		
		
			// Set speed to 0 
				JACK1_SPEED := 0;
				JACK2_SPEED := 0;
				JACK3_SPEED := 0;
			
		END_IF
		
	//MONITORING TOOL - Z ROTATION AXIS - POSITIVE DIRECTION
		IF (RGP.EN1000.SS1457_MON_TOOL_ROTZ_POS = 1) THEN
			MON_TOOL_ROTZ_MOVE := 1;
			RGP.PROG.MON_TOOL_ROTZ_POS_EN := 1;
			// Set speed based on which toggle varible is true (from TS) SEE SECTION "SPEED SETTING CONTROL" 
			IF (MON_TOOL_ROTZ_SLOW_SPEED_ENABLE = 1 AND (MON_TOOL_ROTZ_MEDIUM_SPEED_ENABLE = 0 AND MON_TOOL_ROTZ_FAST_SPEED_ENABLE = 0) ) THEN 
				MON_TOOL_ROTZ_SPEED := MON_TOOL_ROTZ_SLOW_SPEED;
			ELSIF (MON_TOOL_ROTZ_MEDIUM_SPEED_ENABLE = 1 AND (MON_TOOL_ROTZ_SLOW_SPEED_ENABLE = 0 AND MON_TOOL_ROTZ_FAST_SPEED_ENABLE = 0) ) THEN
				MON_TOOL_ROTZ_SPEED := MON_TOOL_ROTZ_MEDIUM_SPEED;
			ELSIF (MON_TOOL_ROTZ_FAST_SPEED_ENABLE = 1 AND (MON_TOOL_ROTZ_SLOW_SPEED_ENABLE = 0 AND MON_TOOL_ROTZ_MEDIUM_SPEED_ENABLE = 0) ) THEN
				MON_TOOL_ROTZ_SPEED := MON_TOOL_ROTZ_FAST_SPEED;
			ELSE // set to slow speed
				MON_TOOL_ROTZ_SPEED := MON_TOOL_ROTZ_SLOW_SPEED;
			END_IF
		ELSE
			MON_TOOL_ROTZ_MOVE := 0;
			RGP.PROG.MON_TOOL_ROTZ_POS_EN := 0;
			MON_TOOL_ROTZ_SPEED := 0;
		END_IF
		
	//MONITORING TOOL - Z ROTATION AXIS - NEGATIVE DIRECTION
		IF (RGP.EN1000.SS1457_MON_TOOL_ROTZ_NEG = 1) THEN
			MON_TOOL_ROTZ_MOVE := 1;
			RGP.PROG.MON_TOOL_ROTZ_NEG_EN := 1;
			// Set speed based on which toggle varible is true (from TS) SEE SECTION "SPEED SETTING CONTROL" 
			IF (MON_TOOL_ROTZ_SLOW_SPEED_ENABLE = 1 AND (MON_TOOL_ROTZ_MEDIUM_SPEED_ENABLE = 0 AND MON_TOOL_ROTZ_FAST_SPEED_ENABLE = 0) ) THEN 
				MON_TOOL_ROTZ_SPEED := -1*MON_TOOL_ROTZ_SLOW_SPEED;
			ELSIF (MON_TOOL_ROTZ_MEDIUM_SPEED_ENABLE = 1 AND (MON_TOOL_ROTZ_SLOW_SPEED_ENABLE = 0 AND MON_TOOL_ROTZ_FAST_SPEED_ENABLE = 0) ) THEN
				MON_TOOL_ROTZ_SPEED := -1*MON_TOOL_ROTZ_MEDIUM_SPEED;
			ELSIF (MON_TOOL_ROTZ_FAST_SPEED_ENABLE = 1 AND (MON_TOOL_ROTZ_SLOW_SPEED_ENABLE = 0 AND MON_TOOL_ROTZ_MEDIUM_SPEED_ENABLE = 0) ) THEN
				MON_TOOL_ROTZ_SPEED := -1*MON_TOOL_ROTZ_FAST_SPEED;
			ELSE // set to slow speed
				MON_TOOL_ROTZ_SPEED := -1*MON_TOOL_ROTZ_SLOW_SPEED;
			END_IF
		ELSE
			MON_TOOL_ROTZ_MOVE := 0;
			RGP.PROG.MON_TOOL_ROTZ_NEG_EN := 0;
			MON_TOOL_ROTZ_SPEED := 0;
		END_IF
				
//------ AXIS MOVE COMMANDS
	//X TRANSLATION AXIS
		IF ( TRANSX_MOVE AND ((RGP.PROG.TRANSX_POS_EN AND TRANSX_SPEED>0.0) OR (RGP.PROG.TRANSX_NEG_EN AND TRANSX_SPEED<0.0)) ) THEN  
			MA_Jog(Axis:= RGP.EN1000.DV1150_TRANSX_DRIVE,Speed:=TRANSX_SPEED);
		ELSE
			Disable_Axis(RGP.EN1000.DV1150_TRANSX_DRIVE);
		END_IF	
	
	//Y TRANSLATION AXIS
		IF ( TRANSY_MOVE AND ((RGP.PROG.TRANSY_POS_EN AND TRANSY_SPEED>0.0) OR (RGP.PROG.TRANSY_NEG_EN AND TRANSY_SPEED<0.0)) ) THEN  
			MA_Jog(Axis:= RGP.EN1000.DV1175_TRANSY_DRIVE,Speed:=TRANSY_SPEED);
		ELSE
			Disable_Axis(RGP.EN1000.DV1175_TRANSY_DRIVE);
		END_IF	

	//POSITION TOOL Z ROTATION AXIS
		IF ( POS_TOOL_ROTZ_MOVE AND ((RGP.PROG.POS_TOOL_ROTZ_POS_EN AND POS_TOOL_ROTZ_SPEED>0.0) OR (RGP.PROG.POS_TOOL_ROTZ_NEG_EN AND POS_TOOL_ROTZ_SPEED<0.0)) ) THEN  
			MA_Jog(Axis:= RGP.EN1000.DV1325_POS_TOOL_ROTZ_DRIVE,Speed:=POS_TOOL_ROTZ_SPEED);
		ELSE
			Disable_Axis(RGP.EN1000.DV1325_POS_TOOL_ROTZ_DRIVE);
		END_IF
	
	// All JACKS
		IF ( (JACK1_MOVE AND JACK2_MOVE AND JACK3_MOVE) AND ( ((RGP.PROG.JACK1_POS_EN AND RGP.PROG.JACK2_POS_EN AND RGP.PROG.JACK3_POS_EN) AND ALL_JACKS_SPEED>0.0) OR ((RGP.PROG.JACK1_NEG_EN AND RGP.PROG.JACK2_NEG_EN AND RGP.PROG.JACK3_NEG_EN) AND ALL_JACKS_SPEED<0.0)) ) THEN  
			MA_Jog(Axis:= RGP.EN1000.DV1151_JACK1_DRIVE,Speed:=ALL_JACKS_SPEED);
			MA_Jog(Axis:= RGP.EN1000.DV1275_JACK2_DRIVE,Speed:=ALL_JACKS_SPEED);
			MA_Jog(Axis:= RGP.EN1000.DV1301_JACK3_DRIVE,Speed:=ALL_JACKS_SPEED);
		ELSE
			Disable_Axis(RGP.EN1000.DV1151_JACK1_DRIVE);
			Disable_Axis(RGP.EN1000.DV1275_JACK2_DRIVE);
			Disable_Axis(RGP.EN1000.DV1301_JACK3_DRIVE);
		END_IF
	
	//JACK 1 
		IF ( JACK1_MOVE AND ((RGP.PROG.JACK1_POS_EN AND JACK1_SPEED>0.0) OR (RGP.PROG.JACK1_NEG_EN AND JACK1_SPEED<0.0)) ) THEN  
			IF (COORDINATED_MOTION = 0) THEN
				MA_Jog(Axis:= RGP.EN1000.DV1151_JACK1_DRIVE,Speed:=JACK1_SPEED);
			ELSE
				MA_Velocity(Axis:= RGP.EN1000.DV1151_JACK1_DRIVE,Speed:=JACK1_SPEED);
			END_IF
		ELSE
			Disable_Axis(RGP.EN1000.DV1151_JACK1_DRIVE);
		END_IF
	
	//JACK 2
		IF ( JACK2_MOVE AND ((RGP.PROG.JACK2_POS_EN AND JACK2_SPEED>0.0) OR (RGP.PROG.JACK2_NEG_EN AND JACK2_SPEED<0.0)) ) THEN  
			IF (COORDINATED_MOTION = 0) THEN
				MA_Jog(Axis:= RGP.EN1000.DV1275_JACK2_DRIVE,Speed:=JACK2_SPEED);
			ELSE
				MA_Velocity(Axis:= RGP.EN1000.DV1275_JACK2_DRIVE,Speed:=JACK2_SPEED);
			END_IF
		ELSE
			Disable_Axis(RGP.EN1000.DV1275_JACK2_DRIVE);
		END_IF
		
	//JACK 3
		IF ( JACK3_MOVE AND ((RGP.PROG.JACK3_POS_EN AND JACK3_SPEED>0.0) OR (RGP.PROG.JACK3_NEG_EN AND JACK3_SPEED<0.0)) ) THEN  
			IF (COORDINATED_MOTION = 0) THEN
				MA_Jog(Axis:= RGP.EN1000.DV1301_JACK3_DRIVE,Speed:=JACK3_SPEED);
			ELSE
				MA_Velocity(Axis:= RGP.EN1000.DV1301_JACK3_DRIVE,Speed:=JACK3_SPEED);
			END_IF
		ELSE
			Disable_Axis(RGP.EN1000.DV1301_JACK3_DRIVE);
		END_IF

	
	//MONITORING TOOL Z ROTATION AXIS
		IF ( MON_TOOL_ROTZ_MOVE AND ((RGP.PROG.MON_TOOL_ROTZ_POS_EN AND MON_TOOL_ROTZ_SPEED>0.0) OR (RGP.PROG.MON_TOOL_ROTZ_NEG_EN AND MON_TOOL_ROTZ_SPEED<0.0)) ) THEN  
			MA_Jog(Axis:= RGP.EN1000.RIO1135_MON_TOOL_ROTZ_DRIVE,Speed:=MON_TOOL_ROTZ_SPEED);
		ELSE
			Disable_Axis(RGP.EN1000.RIO1135_MON_TOOL_ROTZ_DRIVE);
		END_IF

//------ Monitors the conditions to disable the system (E-STOP)
	IF (RGP.PROG.Alarm_Present=1 OR RGP.PROG.HMI_ACTIVE_LOC=0) THEN
		Disable_System(RGP:=RGP);
		
		TRANSX_SPEED := 0;
		TRANSY_SPEED := 0;
		POS_TOOL_ROTZ_SPEED := 0;
		ALL_JACKS_SPEED := 0;
		JACK1_SPEED := 0;
		JACK2_SPEED := 0;
		JACK3_SPEED := 0;
		MON_TOOL_ROTZ_SPEED := 0;
	
	END_IF

	IF (Screen_Transistion=1) THEN
		Disable_System(RGP:=RGP);

		TRANSX_SPEED := 0;
		TRANSY_SPEED := 0;
		POS_TOOL_ROTZ_SPEED := 0;
		ALL_JACKS_SPEED := 0;
		JACK1_SPEED := 0;
		JACK2_SPEED := 0;
		JACK3_SPEED := 0;
		MON_TOOL_ROTZ_SPEED := 0;

		Screen_Transistion:=0;
	END_IF
	Last_Screen:=RGP.ACTIVE_HMI.TS.Active_Panel;
]]></ST>
    </Implementation>
    <LineIds Name="Top_Level_Control">
      <LineId Id="52798" Count="0" />
      <LineId Id="52800" Count="16" />
      <LineId Id="52799" Count="0" />
      <LineId Id="52817" Count="0" />
      <LineId Id="52819" Count="0" />
      <LineId Id="131" Count="12" />
      <LineId Id="47741" Count="12" />
      <LineId Id="144" Count="0" />
      <LineId Id="49901" Count="0" />
      <LineId Id="223" Count="10" />
      <LineId Id="49907" Count="0" />
      <LineId Id="393" Count="1" />
      <LineId Id="51582" Count="0" />
      <LineId Id="31689" Count="0" />
      <LineId Id="51194" Count="0" />
      <LineId Id="51581" Count="0" />
      <LineId Id="51196" Count="1" />
      <LineId Id="51192" Count="0" />
      <LineId Id="51583" Count="0" />
      <LineId Id="52658" Count="0" />
      <LineId Id="52670" Count="0" />
      <LineId Id="52659" Count="3" />
      <LineId Id="51193" Count="0" />
      <LineId Id="52663" Count="0" />
      <LineId Id="52665" Count="4" />
      <LineId Id="52664" Count="0" />
      <LineId Id="52656" Count="1" />
      <LineId Id="51544" Count="0" />
      <LineId Id="51198" Count="0" />
      <LineId Id="51366" Count="0" />
      <LineId Id="51545" Count="1" />
      <LineId Id="51367" Count="0" />
      <LineId Id="51560" Count="0" />
      <LineId Id="51548" Count="4" />
      <LineId Id="51547" Count="0" />
      <LineId Id="51553" Count="0" />
      <LineId Id="51555" Count="4" />
      <LineId Id="51554" Count="0" />
      <LineId Id="51199" Count="0" />
      <LineId Id="51569" Count="4" />
      <LineId Id="51568" Count="0" />
      <LineId Id="51574" Count="0" />
      <LineId Id="51576" Count="4" />
      <LineId Id="51575" Count="0" />
      <LineId Id="51200" Count="0" />
      <LineId Id="31692" Count="0" />
      <LineId Id="3175" Count="0" />
      <LineId Id="49018" Count="0" />
      <LineId Id="5998" Count="0" />
      <LineId Id="45441" Count="0" />
      <LineId Id="50013" Count="2" />
      <LineId Id="51201" Count="1" />
      <LineId Id="50016" Count="4" />
      <LineId Id="51349" Count="1" />
      <LineId Id="50021" Count="0" />
      <LineId Id="50029" Count="0" />
      <LineId Id="50031" Count="1" />
      <LineId Id="51203" Count="7" />
      <LineId Id="50039" Count="0" />
      <LineId Id="51351" Count="1" />
      <LineId Id="50030" Count="0" />
      <LineId Id="50012" Count="0" />
      <LineId Id="50041" Count="1" />
      <LineId Id="51211" Count="7" />
      <LineId Id="50049" Count="0" />
      <LineId Id="51353" Count="1" />
      <LineId Id="50050" Count="0" />
      <LineId Id="50728" Count="0" />
      <LineId Id="50712" Count="2" />
      <LineId Id="51221" Count="0" />
      <LineId Id="51224" Count="0" />
      <LineId Id="51223" Count="0" />
      <LineId Id="51362" Count="0" />
      <LineId Id="51222" Count="0" />
      <LineId Id="51225" Count="1" />
      <LineId Id="50721" Count="0" />
      <LineId Id="51363" Count="0" />
      <LineId Id="51227" Count="0" />
      <LineId Id="51229" Count="1" />
      <LineId Id="51228" Count="0" />
      <LineId Id="51364" Count="0" />
      <LineId Id="50722" Count="0" />
      <LineId Id="51231" Count="1" />
      <LineId Id="50725" Count="0" />
      <LineId Id="51365" Count="0" />
      <LineId Id="50726" Count="0" />
      <LineId Id="51355" Count="3" />
      <LineId Id="51361" Count="0" />
      <LineId Id="50061" Count="0" />
      <LineId Id="50727" Count="0" />
      <LineId Id="50052" Count="0" />
      <LineId Id="51233" Count="9" />
      <LineId Id="51359" Count="1" />
      <LineId Id="50051" Count="0" />
      <LineId Id="51244" Count="0" />
      <LineId Id="51243" Count="0" />
      <LineId Id="51190" Count="0" />
      <LineId Id="18159" Count="0" />
      <LineId Id="49945" Count="0" />
      <LineId Id="49951" Count="0" />
      <LineId Id="49946" Count="0" />
      <LineId Id="49952" Count="0" />
      <LineId Id="49947" Count="0" />
      <LineId Id="49953" Count="0" />
      <LineId Id="49948" Count="0" />
      <LineId Id="49954" Count="0" />
      <LineId Id="49949" Count="0" />
      <LineId Id="49955" Count="0" />
      <LineId Id="49950" Count="0" />
      <LineId Id="49956" Count="0" />
      <LineId Id="51189" Count="0" />
      <LineId Id="47807" Count="0" />
      <LineId Id="49957" Count="0" />
      <LineId Id="47801" Count="0" />
      <LineId Id="25273" Count="0" />
      <LineId Id="18207" Count="0" />
      <LineId Id="47297" Count="0" />
      <LineId Id="18209" Count="0" />
      <LineId Id="51191" Count="0" />
      <LineId Id="8281" Count="0" />
      <LineId Id="50729" Count="0" />
      <LineId Id="50731" Count="99" />
      <LineId Id="51378" Count="0" />
      <LineId Id="50832" Count="20" />
      <LineId Id="51439" Count="0" />
      <LineId Id="50854" Count="24" />
      <LineId Id="51441" Count="0" />
      <LineId Id="50880" Count="86" />
      <LineId Id="51416" Count="0" />
      <LineId Id="50968" Count="60" />
      <LineId Id="52136" Count="0" />
      <LineId Id="52510" Count="0" />
      <LineId Id="51687" Count="0" />
      <LineId Id="52300" Count="1" />
      <LineId Id="52304" Count="0" />
      <LineId Id="52299" Count="0" />
      <LineId Id="52303" Count="0" />
      <LineId Id="51788" Count="1" />
      <LineId Id="51799" Count="0" />
      <LineId Id="51801" Count="1" />
      <LineId Id="51805" Count="0" />
      <LineId Id="51803" Count="0" />
      <LineId Id="51806" Count="0" />
      <LineId Id="51800" Count="0" />
      <LineId Id="51790" Count="0" />
      <LineId Id="51808" Count="6" />
      <LineId Id="51807" Count="0" />
      <LineId Id="51815" Count="0" />
      <LineId Id="51817" Count="6" />
      <LineId Id="51816" Count="0" />
      <LineId Id="51787" Count="0" />
      <LineId Id="51777" Count="0" />
      <LineId Id="51769" Count="0" />
      <LineId Id="51778" Count="1" />
      <LineId Id="51770" Count="1" />
      <LineId Id="51780" Count="1" />
      <LineId Id="51772" Count="1" />
      <LineId Id="51782" Count="1" />
      <LineId Id="51774" Count="1" />
      <LineId Id="51784" Count="1" />
      <LineId Id="51776" Count="0" />
      <LineId Id="51688" Count="0" />
      <LineId Id="52298" Count="0" />
      <LineId Id="51034" Count="0" />
      <LineId Id="52295" Count="1" />
      <LineId Id="52294" Count="0" />
      <LineId Id="52297" Count="0" />
      <LineId Id="52162" Count="0" />
      <LineId Id="52173" Count="0" />
      <LineId Id="52175" Count="0" />
      <LineId Id="52188" Count="0" />
      <LineId Id="52190" Count="1" />
      <LineId Id="52193" Count="2" />
      <LineId Id="52198" Count="0" />
      <LineId Id="52209" Count="0" />
      <LineId Id="52199" Count="0" />
      <LineId Id="52202" Count="0" />
      <LineId Id="52210" Count="0" />
      <LineId Id="52203" Count="0" />
      <LineId Id="52206" Count="0" />
      <LineId Id="52211" Count="0" />
      <LineId Id="52160" Count="1" />
      <LineId Id="52142" Count="0" />
      <LineId Id="52140" Count="0" />
      <LineId Id="52144" Count="3" />
      <LineId Id="52292" Count="0" />
      <LineId Id="52148" Count="6" />
      <LineId Id="52293" Count="0" />
      <LineId Id="52155" Count="4" />
      <LineId Id="52139" Count="0" />
      <LineId Id="51040" Count="2" />
      <LineId Id="52511" Count="0" />
      <LineId Id="51983" Count="0" />
      <LineId Id="52284" Count="1" />
      <LineId Id="52283" Count="0" />
      <LineId Id="52282" Count="0" />
      <LineId Id="52286" Count="0" />
      <LineId Id="51957" Count="25" />
      <LineId Id="51879" Count="0" />
      <LineId Id="51984" Count="0" />
      <LineId Id="51908" Count="16" />
      <LineId Id="51045" Count="0" />
      <LineId Id="52287" Count="0" />
      <LineId Id="52227" Count="0" />
      <LineId Id="52289" Count="1" />
      <LineId Id="52288" Count="0" />
      <LineId Id="52291" Count="0" />
      <LineId Id="52264" Count="4" />
      <LineId Id="52270" Count="11" />
      <LineId Id="52269" Count="0" />
      <LineId Id="52229" Count="0" />
      <LineId Id="51925" Count="0" />
      <LineId Id="51047" Count="0" />
      <LineId Id="52252" Count="10" />
      <LineId Id="52250" Count="0" />
      <LineId Id="52263" Count="0" />
      <LineId Id="52247" Count="2" />
      <LineId Id="52246" Count="0" />
      <LineId Id="51051" Count="4" />
      <LineId Id="52512" Count="0" />
      <LineId Id="52305" Count="0" />
      <LineId Id="52064" Count="32" />
      <LineId Id="52098" Count="16" />
      <LineId Id="51059" Count="0" />
      <LineId Id="52310" Count="1" />
      <LineId Id="52332" Count="0" />
      <LineId Id="52312" Count="3" />
      <LineId Id="52333" Count="0" />
      <LineId Id="52316" Count="4" />
      <LineId Id="52334" Count="1" />
      <LineId Id="52322" Count="2" />
      <LineId Id="52336" Count="0" />
      <LineId Id="52325" Count="1" />
      <LineId Id="52337" Count="0" />
      <LineId Id="52327" Count="2" />
      <LineId Id="52338" Count="0" />
      <LineId Id="52330" Count="1" />
      <LineId Id="52306" Count="0" />
      <LineId Id="52308" Count="1" />
      <LineId Id="51060" Count="0" />
      <LineId Id="52115" Count="0" />
      <LineId Id="52219" Count="1" />
      <LineId Id="52118" Count="0" />
      <LineId Id="52217" Count="0" />
      <LineId Id="52119" Count="6" />
      <LineId Id="52233" Count="0" />
      <LineId Id="52126" Count="3" />
      <LineId Id="51063" Count="0" />
      <LineId Id="51065" Count="3" />
      <LineId Id="52513" Count="0" />
      <LineId Id="52473" Count="0" />
      <LineId Id="51985" Count="4" />
      <LineId Id="52037" Count="25" />
      <LineId Id="52036" Count="0" />
      <LineId Id="52016" Count="0" />
      <LineId Id="52018" Count="16" />
      <LineId Id="51072" Count="0" />
      <LineId Id="52504" Count="0" />
      <LineId Id="52475" Count="28" />
      <LineId Id="52474" Count="0" />
      <LineId Id="52035" Count="0" />
      <LineId Id="51073" Count="0" />
      <LineId Id="51860" Count="0" />
      <LineId Id="52223" Count="1" />
      <LineId Id="51863" Count="0" />
      <LineId Id="52221" Count="0" />
      <LineId Id="51864" Count="6" />
      <LineId Id="52222" Count="0" />
      <LineId Id="51871" Count="3" />
      <LineId Id="51077" Count="78" />
      <LineId Id="52521" Count="0" />
      <LineId Id="52519" Count="1" />
      <LineId Id="52518" Count="0" />
      <LineId Id="51156" Count="5" />
      <LineId Id="52514" Count="0" />
      <LineId Id="51162" Count="0" />
      <LineId Id="52515" Count="2" />
      <LineId Id="51163" Count="5" />
      <LineId Id="52505" Count="0" />
      <LineId Id="51169" Count="0" />
      <LineId Id="52506" Count="2" />
      <LineId Id="51170" Count="2" />
      <LineId Id="51176" Count="7" />
      <LineId Id="51185" Count="0" />
      <LineId Id="8297" Count="1" />
      <LineId Id="18866" Count="0" />
      <LineId Id="47845" Count="0" />
      <LineId Id="49908" Count="2" />
      <LineId Id="51186" Count="0" />
      <LineId Id="49911" Count="2" />
      <LineId Id="47874" Count="0" />
      <LineId Id="49914" Count="0" />
      <LineId Id="8302" Count="2" />
      <LineId Id="32861" Count="0" />
      <LineId Id="32863" Count="0" />
      <LineId Id="49915" Count="2" />
      <LineId Id="51187" Count="0" />
      <LineId Id="49918" Count="2" />
      <LineId Id="47902" Count="1" />
      <LineId Id="8308" Count="2" />
      <LineId Id="49921" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>